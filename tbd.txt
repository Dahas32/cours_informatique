- Algo-cours-théorie :
	- manque P/NP 
- optimisation combinatoire
	- prog linéaire
	- branch and bound
	- algo génétique

## site :

- ordre de parcours des cours. Re tructurer les parties :
	- complexités
	- structures
	- architechture
	- objet

- https://realpython.com/advanced-visual-studio-code-python/
- tout mettre en créative commons ?
- titre d'algorithme comme un ####

- ajouter lien externe avec icône à la fin du lien (comme arch Linux wiki)

- python : utiliser celui de windows.
- cours objet : classe = idée de ; objet = réalité

- cours objet : attribut vs méthode. Insister pendant le cours 1 objet

### web
faire des exemples plus simple puis compliquer le tout :

* routes.
* données + création de html
* bd (création, routes, findOne et findAll)

- ajouter site exo :
	- code : leet, google
	- algo : livres
- cours programmation événementielle : 
	- faire tout le cours juste avec des diagrammes uml (design pattern observer, classe window et héritage, update, draw, etc) et mettre pyglet en details caché.
	- comment représenter les événements en uml ?

- node : remplacer require par import : es6 et plus commonjs
- ts et jest ? Utilisation de babel ?


## MPCI

- tbd exemple structure de données (fraction, champ de bits)

- 1er vendredi ajout d'un tp. C'est trop court d'une 1h pour 1/3 des étudiants.

- ajouter plugin mermaid pour l'uml : https://github.com/KevinGimbel/eleventy-plugin-mermaid 

- js : ajouter let devant toutes les variables.

## cours

- web : où sont les header dans les outils de dév ?
- exo complexité. reprendre exo 1.3 5 (p16) du livre parallèle.
- séparer clairement le cours objet ? En ajoutant ce qu'il faut si on ne fait pas le début du cours de complexité.

### ana data

- ajouter interprétations dans les analyses 
- régression logistique
- à ajouter : analyse discriminante 

### web

- faire données get et post de façon précise.
- faire création de html avec js de façon précise
- route avec des params  /truc/:variable
- cookie et localstorage exemple en js

-svelte en front ?
- prisma plutot que sequelize ?
-typescript ?

### projet : voyageur de commerce 

- ajoute code recuit simulé au projet glouton voyageur de commerce.

### cours début
- verifier par le code (puis les tests) que ce vous écrivez est correct.

### cours objet

- héritage : supprimer privé, simplifier exemple du cours du début en supprimant plein de classes inutiles. Partie appeler directement une classe. Le faire
- héritage : simplifier avec photo le cours.
- héritage : blocage : contraire

- coder ses objets :
	- faire le reste avec la boucle. L'expliciter à chaque fois.

- dans cours base-de-code : ajouter des trucs à coder. Et des tp ? Voir Pierre
- projet coder ses objets : 
	- td coder ses objets : `main_fonctionnalite` pas clair pour les étudiants : appeler ça essai.
	- x = ligne y = colonne
	- faire 1 juste des fonctions
	- puis les mettre dans des objets
	- tout détailler en petit bouts en disant exactement quoi faire (pour la matrice : d'abort faire la matrice / puis vérifier qu'elle marche / puis en faire ue fonction / puis la mettre ans le main)
	- supprimer `main_fonctionnalité`
	- coder ses objet : bataille navale : remplacer matrice par liste + indirection
	- cours coder les objet : finir la partie améliorer avec des tests faits.
	- mettre les trucs python/vscode du projet coder-ses-objets dans le projet python/vscode

- faire des essais avec ses classes et montrer que c'est pas pareil !
-> dans compteur par exemple ? Montrer la version sans et avec classes

### autres cours

- faire un tuto seaborn. 
	-utiliser le projet-tris comme base
	- parler des palettes

- système de fichier : 
	* liens
	* permissions
	* unix et tout est fichier
	* fichiers spéciaux (comme `/dev/audio` par exemple)
	* une application mac est un dossier.
	* comment écrire sur le disque dur, le [file system](https://en.wikipedia.org/wiki/Comparison_of_file_systems)

- graphes : 
	- prés-requis complexité, algo et python pour le cours.
		- encodage.md
	- arbres : combien d'arbre ? Encodage prüfer et application à un arbre aléatoire (!= différent de la structure).

-caractères unicode : <http://ressources.univ-lemans.fr/AccesLibre/UM/Pedago/physique/02/divers/unicode.html>

- parie code :  poetry et venv à ajouter quelque part.

- partie théorie : 
	* logique = formule logique = sat
	* problème de décision : sous ensemble vrai d'un ensemble. se dérive de langage décidable
	* refs : 
		poly de Pascal.

		<https://en.wikipedia.org/wiki/List_of_undecidable_problems>
		<https://plato.stanford.edu/entries/church-turing/>
		<http://pageperso.lif.univ-mrs.fr/~kevin.perrot/documents/2016/calculabilite/Cours_16.pdf>
		<https://www.cs.odu.edu/~zeil/cs390/latest/Public/turing-complete/index.html>

- ressource dans la partie url :
	* curl : utilisation
	* un serveur en python avec des fichiers en chroot.
	* faire du telnet : pour illustrer les protocoles
	* RFC
	* autre protocole (genre envoyer un mail ?)

- faire un vidéo du cours ?

## MPCI

- changer nom par variable partout dans le cours mémoire et objets
- schema des block de fichiers dans le disque dur (avec les MZ pour dos ?)

- pourquoi pas sac à dos avec bourrinage pour résoudre puis l'algo avec preuve fine.

- faire plus de glouton avec du code en classes et des exo d'approximation (p600 Kleinberg et Tardos).

- cours sous-chaines : 
	1. naif
	2. amélioration "à la marge"
	2.1 BMH avec amélioration complexité min 
	2.2 naif avec break pour complexité en moyenne
	3. rabin-Karp
	4. KMP
	4.1 naif avec idée de l'amélioration KMP
	4.2 KMP
	
- sous-chaines : mettre des exemples vrais et pas de aaa?aaa 

- ajouter théorie
	- clauses logiques
	- sat
	- ajouter théorie thm de cook / NPC 
	- SAT -> 3-SAT
- ajouter : hasard en informatique

- parler du modèle de von Neumann de machine avec mémoire et registre.
dans espace d nom ? ou pour Turing ?

- tri : calcul de l'écart type sans tout calculer (modern C p225 environ).
Remarques élèves :

- faire des qcm

- si les tests sont trop durs ça démotive (faire des étapes dans les tests ?)

- dans héritage : mettre un lien vers privé/public


### Cours ecc l'année prochaine :

1 - faire au moins 2 séances de cours juste sur python, les tests et le code (avec calcul de périmètre et de matrices : utile pour la suite)
- en td faire le début avec l'ordi à chaque fois (une vidéo ?)

- aller moins loin 
- faire des contrôle à chaque fois pour qu'ils bossent.
- commencer par une interro sur python de base (avec cours avant pour s'y former)

- tp 1 : python de base et lecture des messages d'erreurs.

- MPCI : partie gloutons. Ajouter une partie sur P, NP et NPC sans démonstrations
pour justifier de l'utilisation des gloutons si pas optimal.

- MPCI projet voyageur de commerce glouton :
	- détailler plus l'algorithme glouton (avec vérification si on est pas déja sur la ville)
	- faire une classe donnée avec :
		- constructeur avec une liste
		- le calcul de la distance d'un couple
		- le calcul de la distance du cycle

- enveloppe convexe : 
	- des tbd
	- relire avec droite / gauche de droite pas clair. Peut-être parler de vecteur directeur.

- fichiers : 
	- ajouter fat et méthode de maintenant
	- parler de la fat ? La voir avec un explorateur de disque ?

- enveloppe convexe : utilisation	
	- jaglom : diamètre de 2 points

- cours sur :
	- erreurs à trouver
	- comprendre les messages d'erreurs	:
		- stack
		- débugeur et print
		- object is not callable
		- index de list
		- méthode de string non mutable
		- écrire sur un non mutable
	- print aux endroits chaux
	- exit pour sortir rapidement
	-débuguer (breakpoint etc) pour éviter les print et exit
