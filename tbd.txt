cours C&système :

- parler de webassembly/python/java : dire que e byte code est souvent une machine à pile 
- ordi :
	- modèle le plus simple puis grossir
	- genre : de l'instruction python au circuit
	- sans registre, juste mémoire
	- sans mémoire cache
- langage et compilation. En parler très peu, voir pas du tout. Renvoyer juste à
  une page.
- édition de lien modifier la table à la main (changer de fct ?)
- les registre permettent de limiter l'accès mémoire

C :

- juste un type int/double puis structure puis quelques exos algos
- pointeurs 
- puis insister sur les types et attention aux effects de bords/cast 
- compilations/make/...
macro ?

- cours systeme :
	- d'une grosse boite noir aux transistors

cours unix : https://wiki.centrale-marseille.fr/informatique/public:unix:accueil 
## site :

- séparer les unités d'informations des cours :
	- UI : structure -> chaîne de caractère
	- cours : 12h pour expliquer un concept (avec prérequis)


- https://realpython.com/advanced-visual-studio-code-python/
- tout mettre en créative commons ?
- titre d'algorithme comme un ####

- python : utiliser celui de windows.
- cours objet : classe = idée de ; objet = réalité

- cours objet : attribut vs méthode. Insister pendant le cours 1 objet

- Tetris à mettre en DM/ exercice : 
	- supprimer lock delay (mettre en amélioration)
	- supprimer remettre accumulateur à 0 (mettre en amélioration)

 https://finiasz.net/teaching/ENSTA/IN101%20-%20poly%20algo.pdf
https://zanotti.univ-tln.fr/ALGO/I31/Asymptotiques.html
http://people.cs.uchicago.edu/~simon/OLD/COURSES/CS311/UTM.pdf
 https://www.youtube.com/watch?v=C9T6iQYCW10
https://catonmat.net/proof-that-sed-is-turing-complete


- et mpci 2023 : coloriage : 
	- si tout le monde déteste au moins 2 personnes : cycle de haine
	- pas de cycle impair si anti-transitif
	- en déduire une solution récursive
	

- cours python : 
	- expliciter complexité des opérations de listes (comme remove, sort, insert et la concaténation)
	- on ne modifie pas  ce sur quoi on itère (for i in liste et del dedans)

### web
faire des exemples plus simple puis compliquer le tout :

* routes.
* données + création de html
* bd (création, routes, findOne et findAll)

- ajouter site exo :
	- code : leet, google
	- algo : livres
- cours programmation événementielle : 
	- faire tout le cours juste avec des diagrammes uml (design pattern observer, classe window et héritage, update, draw, etc) et mettre pyglet en details caché.
	- comment représenter les événements en uml ?

- node : remplacer require par import : es6 et plus commonjs
- ts et jest ? Utilisation de babel ?


## MPCI

exo :
	- preuve & complexité : différentes étapes :
		1. tout dire
		2. points clés


- tbd exemple structure de données (fraction, champ de bits)

- 1er vendredi ajout d'un tp. C'est trop court d'une 1h pour 1/3 des étudiants.

- ajouter plugin mermaid pour l'uml : https://github.com/KevinGimbel/eleventy-plugin-mermaid 

- js : ajouter let devant toutes les variables.

## cours

- web : où sont les header dans les outils de dév ?
- exo complexité. reprendre exo 1.3 5 (p16) du livre parallèle.
- séparer clairement le cours objet ? En ajoutant ce qu'il faut si on ne fait pas le début du cours de complexité.

### ana data

- ajouter interprétations dans les analyses 
- régression logistique
- à ajouter : analyse discriminante 

### web

- faire données get et post de façon précise.
- faire création de html avec js de façon précise
- route avec des params  /truc/:variable
- cookie et localstorage exemple en js

-svelte en front ?
- prisma plutot que sequelize ?
-typescript ?
- jest et typescript et ecmascript modules

### cours début
- verifier par le code (puis les tests) que ce vous écrivez est correct.

### cours objet

- héritage : supprimer privé, simplifier exemple du cours du début en supprimant plein de classes inutiles. Partie appeler directement une classe. Le faire
- héritage : simplifier avec photo le cours.
- héritage : blocage : contraire

- coder ses objets :
	- faire le reste avec la boucle. L'expliciter à chaque fois.

- dans cours base-de-code : ajouter des trucs à coder. Et des tp ? Voir Pierre

- faire des essais avec ses classes et montrer que c'est pas pareil !
-> dans compteur par exemple ? Montrer la version sans et avec classes

### autres cours

- faire un tuto seaborn. 
	-utiliser le projet-tris comme base
	- parler des palettes

- système de fichier : 
	* liens
	* permissions
	* unix et tout est fichier
	* fichiers spéciaux (comme `/dev/audio` par exemple)
	* une application mac est un dossier.
	* comment écrire sur le disque dur, le [file system](https://en.wikipedia.org/wiki/Comparison_of_file_systems)

- graphes : 
	- prés-requis complexité, algo et python pour le cours.
		- encodage.md
	- arbres : combien d'arbre ? Encodage prüfer et application à un arbre aléatoire (!= différent de la structure).

- parie code :  poetry et venv à ajouter quelque part.

- partie théorie : 
	* logique = formule logique = sat
	* problème de décision : sous ensemble vrai d'un ensemble. se dérive de langage décidable
	* refs : 
		poly de Pascal.

		<https://en.wikipedia.org/wiki/List_of_undecidable_problems>
		<https://plato.stanford.edu/entries/church-turing/>
		<http://pageperso.lif.univ-mrs.fr/~kevin.perrot/documents/2016/calculabilite/Cours_16.pdf>
		<https://www.cs.odu.edu/~zeil/cs390/latest/Public/turing-complete/index.html>

- ressource dans la partie url :
	* curl : utilisation
	* un serveur en python avec des fichiers en chroot.
	* faire du telnet : pour illustrer les protocoles
	* RFC
	* autre protocole (genre envoyer un mail ?)

- faire un vidéo du cours ?

## MPCI

- changer nom par variable partout dans le cours mémoire et objets
- schema des block de fichiers dans le disque dur (avec les MZ pour dos ?)

- pourquoi pas sac à dos avec bourrinage pour résoudre puis l'algo avec preuve fine.

- faire plus de glouton avec du code en classes et des exo d'approximation (p600 Kleinberg et Tardos).

- cours sous-chaines : 
	1. naif
	2. amélioration "à la marge"
	2.1 BMH avec amélioration complexité min 
	2.2 naif avec break pour complexité en moyenne
	3. rabin-Karp
	4. KMP
	4.1 naif avec idée de l'amélioration KMP
	4.2 KMP
	
- sous-chaines : mettre des exemples vrais et pas de aaa?aaa 

- ajouter théorie
	- clauses logiques
	- sat
	- ajouter théorie thm de cook / NPC 
	- SAT -> 3-SAT
- ajouter : hasard en informatique

- parler du modèle de von Neumann de machine avec mémoire et registre.
dans espace d nom ? ou pour Turing ?

- tri : calcul de l'écart type sans tout calculer (modern C p225 environ).

- si les tests sont trop durs ça démotive (faire des étapes dans les tests ?)

- dans héritage : mettre un lien vers privé/public


- MPCI : partie gloutons. Ajouter une partie sur P, NP et NPC sans démonstrations
pour justifier de l'utilisation des gloutons si pas optimal.

- MPCI projet voyageur de commerce glouton :
	- détailler plus l'algorithme glouton (avec vérification si on est pas déjà sur la ville)
	- faire une classe donnée avec :
		- constructeur avec une liste
		- le calcul de la distance d'un couple
		- le calcul de la distance du cycle

- enveloppe convexe : 
	- des tbd
	- relire avec droite / gauche de droite pas clair. Peut-être parler de vecteur directeur.
- enveloppe convexe : utilisation	
	- jaglom : diamètre de 2 points

- fichiers : 
	- ajouter fat et méthode de maintenant
	- parler de la fat ? La voir avec un explorateur de disque ?


- cours d'intro sur :
	- check python: ce que vous devez savoir pour commencer à coder
	- erreurs à trouver
	- comprendre les messages d'erreurs	:
		- stack
		- débugeur et print
		- object is not callable
		- index de list
		- méthode de string non mutable
		- écrire sur un non mutable
	- print aux endroits chaux
	- exit pour sortir rapidement
	-débuguer (breakpoint etc) pour éviter les print et exit

- <https://fr.wikipedia.org/wiki/Algorithme_de_Heap> en projet ?
- tri par base (dans old a trier)