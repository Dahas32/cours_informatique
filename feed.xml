<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/cours_informatique/feed.xml" rel="self" type="application/atom+xml" /><link href="/cours_informatique/" rel="alternate" type="text/html" /><updated>2021-08-23T13:01:06+00:00</updated><id>/cours_informatique/feed.xml</id><title type="html">cours d’informatique</title><subtitle>Support de cours/td d'informatique à l'école centrale marseille.</subtitle><entry><title type="html">Installation de python</title><link href="/cours_informatique/tutos/python/2021/08/20/installation-de-python.html" rel="alternate" type="text/html" title="Installation de python" /><published>2021-08-20T00:00:00+00:00</published><updated>2021-08-20T00:00:00+00:00</updated><id>/cours_informatique/tutos/python/2021/08/20/installation-de-python</id><content type="html" xml:base="/cours_informatique/tutos/python/2021/08/20/installation-de-python.html">&lt;p&gt;Comment installer et utiliser python sur son ordinateur. On y verra différentes solutions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;plan&quot;&gt;plan&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#python-&quot;&gt;qu’est que python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#installation&quot;&gt;installation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#anaconda-id&quot;&gt;anaconda&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gestionnaire-package-id&quot;&gt;gestionnaire de paquet&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#interpreteur-id&quot;&gt;tests de fonctionnement avec un terminal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#packages&quot;&gt;installation de nouveaux packages&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;python-&quot;&gt;python ?&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://fr.wikipedia.org/wiki/Python_(langage)&quot;&gt;https://fr.wikipedia.org/wiki/Python_(langage)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Stricto sensu, &lt;a href=&quot;https://www.python.org/&quot;&gt;Python&lt;/a&gt; est un langage de programmation initialement développé par &lt;a href=&quot;https://fr.wikipedia.org/wiki/Guido_van_Rossum&quot;&gt;Guido van Rossum&lt;/a&gt; pour le bien des développeurs et de l’humanité.&lt;/p&gt;

&lt;p&gt;Pour pouvoir écrire du code python et l’exécuter sur votre ordinateur, il vous faudra quelques outils :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;un &lt;a href=&quot;https://fr.wikipedia.org/wiki/%C3%89diteur_de_texte&quot;&gt;éditeur de texte&lt;/a&gt;&lt;/strong&gt;. Il vous permettra d’écrire du code dans le langage python et de le sauver dans des &lt;a href=&quot;https://fr.wikipedia.org/wiki/Fichier_texte&quot;&gt;fichiers texte&lt;/a&gt;. Par défaut, l’extension de fichier python est &lt;em&gt;“.py”&lt;/em&gt;. Par exemple, un fichier nommé &lt;em&gt;“hello.py”&lt;/em&gt; à toute les chance d’être un programme python.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;un &lt;a href=&quot;https://docs.python.org/fr/3/tutorial/interpreter.html&quot;&gt;interpréteur python&lt;/a&gt;&lt;/strong&gt;. C’est un programme qui &lt;em&gt;exécute&lt;/em&gt; du code python. L’interpréteur python étant un programme, il est différent selon son système d’exploitiation (mac, linux ou windows par exemple). Lorsque l’on &lt;em&gt;installe&lt;/em&gt; python, c’est en fait l’interpréteur qu’on installe sur sa machine.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;des bibliothèques&lt;/strong&gt;. Une bibliothèque, module ou encore package python est un ensemble de fichiers de code permettant de réaliser une ou plusieurs taches précises (comme &lt;a href=&quot;https://numpy.org/&quot;&gt;numpy&lt;/a&gt; pour le calcul scientifique ou &lt;a href=&quot;https://flask.palletsprojects.com/&quot;&gt;flask&lt;/a&gt; pour créer des serveur web). L’utilisation de bibliothèques permet de créer rapidement des programmes python robuste et efficaces (avant de coder quelque chose, vérifiez s’il n’existe pas déjà un module le faisant… Vous gagnerez du temps). Pour installer facilement des modules, on utilise un programme nommé &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;&lt;em&gt;“pip”&lt;/em&gt;&lt;/a&gt; (package installer for python) qui va récupérer depuis le site &lt;a href=&quot;https://pypi.org/&quot;&gt;PyPi&lt;/a&gt; (python package index) la bibliothèque demandée et va l’installer sur votre ordinateur.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;quel-python-utiliser-&quot;&gt;quel python utiliser ?&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Utilisez la version 3 de python&lt;/strong&gt;. Il n’est pas nécessaire d’avoir la toute dernière itération de cette version (3.9.6 à l’heure où je tape ces caractères), toute version 3 de python pas trop ancienne doit convenir.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Si vous installez python pour la première fois sur votre ordinateur, choisissez d’installer la dernière version stable de python 3.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Une version de python est composée de 3 nombres &lt;a href=&quot;https://semver.org/&quot;&gt;MAJOR.MINOR.PATCH&lt;/a&gt; :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;MAJOR&lt;/strong&gt; : pour nous sera 3.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;MINOR&lt;/strong&gt; : chaque année une nouvelle itération arrive, avec son lot de nouveautés en therme de structures de données ou de bibliothèques.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt; : correctifs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Chaque année sort une nouvelle version de python (voir &lt;a href=&quot;https://devguide.python.org/#status-of-python-branches&quot;&gt;https://devguide.python.org/#status-of-python-branches&lt;/a&gt;), les anciennes versions sont maintenues 5 ans avant d’être considérées comme obsolète. Chaque version vient avec son &lt;a href=&quot;https://fr.wikipedia.org/wiki/Changelog&quot;&gt;changelog&lt;/a&gt;, qui donne ses nouveautés et changements par rapport à la version précédente (&lt;a href=&quot;https://docs.python.org/release/3.9.6/whatsnew/changelog.html#changelog&quot;&gt;ici&lt;/a&gt; le changelog de la version 3.9.6)&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;La version majeur actuelle de python est 3, il n’y pas prévu d’en changer avant un certain temps.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;et-python-2-&quot;&gt;et python 2 ?&lt;/h3&gt;

&lt;p&gt;Depuis le 1er janvier 2020, la version majeure 2 de python est &lt;strong&gt;obsolète&lt;/strong&gt;, il est donc fortement recommandé de ne plus l’utiliser. Vos programme seront en effet difficilement maintenance et de plus en plus difficilement utilisable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Il n’y a &lt;strong&gt;aucune&lt;/strong&gt; bonne raison d’utiliser la version 2 de python pour écrire des programmes actuellement.
La version de python . Il n’est pas nécessaire
python2 vs python3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Il existe sur le net encore beaucoup d’exemples utilisant la version2 de python, ou certains profs un peu feignant qui ne passent pas leurs exemple/cours en python3. Plutôt que d’utiliser python2, il est recommandé de convertir ces programmes dans la version 3 et de demander la mise à jour des cours…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;jai-quoi-comme-python-&quot;&gt;j’ai quoi comme python ?&lt;/h3&gt;

&lt;p&gt;Nous y reviendrons, mais si vous savez exécuter du code python mais vous ne savez pas trop quel interpréteur vous utilisez (par exemple vous utilisez &lt;a href=&quot;https://jupyter.org/&quot;&gt;jupiter&lt;/a&gt; via un intranet ou &lt;a href=&quot;https://www.spyder-ide.org/&quot;&gt;spider&lt;/a&gt;), il existe quelques trucs simple pour savoir quelle version de python on utilise.&lt;/p&gt;

&lt;h4 id=&quot;python-2-ou-python-3&quot;&gt;python 2 ou python 3&lt;/h4&gt;

&lt;p&gt;La différence la plus visible entre une version 2 et une version 3 de python est que pour une version 3 de python, le code suivant :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;j'utilise un langage obsolète&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;produit l’erreur :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SyntaxError: Missing parentheses in call to 'print'. Did you mean print(&quot;j'utilise un langage obsolète&quot;)?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Alors que le code s’exécute sans soucis avec la version 2 de python (il écrit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;j'utilise un langage obsolète&lt;/code&gt;).&lt;/p&gt;

&lt;h4 id=&quot;quelle-version-de-python&quot;&gt;quelle version de python&lt;/h4&gt;

&lt;p&gt;On suppose que l’on utilise la version 3 de python. Pour connaitre la version spécifique de python, on peut utiliser &lt;a href=&quot;https://docs.python.org/fr/3/library/sys.html#sys.version&quot;&gt;la constante &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt;du module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys&lt;/code&gt;de pyhton&lt;/a&gt; :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;qui rend chez moi :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;3.9.6 (default, Jun 29 2021, 05:25:02) 
[Clang 12.0.5 (clang-1205.0.22.9)]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;C’est à dire que j’utilise la version 3.9.6 de python et que mon interpréteur a été compilé par &lt;a href=&quot;https://clang.llvm.org/&quot;&gt;Clang&lt;/a&gt; (c’est sur un mac).&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;installation&lt;/h2&gt;

&lt;p&gt;Nous allons ici nous concentrer sur l’installation de l’interpréteur python. Il existe plusieurs façon de faire. Nous en présenterons 2 :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;solution universelle simple : utilisez la &lt;a href=&quot;#anaconda-id&quot;&gt;distribution anaconda&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;solution informaticienne : à privilégier si vous voulez contrôler toute votre installation (c’est bien). On utilise un &lt;a href=&quot;#gestionnaire-package-id&quot;&gt;gestionnaire de package&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Parfois, il n’y a rien à faire (c’est souvent le cas sous mac ou linux qui arrivent avec des versions de python 2 et 3 déjà installées).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Une fois que vous aurez installé python (ou pour savoir si vous l’avez déjà installé), vérifiez le en tentant d’&lt;a href=&quot;#interpreteur-id&quot;&gt;exécuter l’interpréteur python dans un terminal&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;anaconda-id&quot;&gt;installation d’anaconda&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://www.anaconda.com/&quot;&gt;Anaconda&lt;/a&gt; est une entreprise gérant des distributions python orientés data-science. L’intérêt d’une telle distribution est qu’elle regroupe et installe de nombreux utilitaires. Le côté négatif est que l’on ne maîtrise pas les paquets installés et l’installation de paquets supplémentaires est parfois problématique.&lt;/p&gt;

&lt;p&gt;Cependant, pour une utilisation basique de python ou une utilisation via jupyter, c’est une solution tout à fait satisfaisante car facile à mettre en œuvre sans être informaticien.&lt;/p&gt;

&lt;h4 id=&quot;téléchargement-de-linstalleur&quot;&gt;Téléchargement de l’installeur&lt;/h4&gt;

&lt;p&gt;Nous allons télécharger la distribution open-source d’anaconda &lt;a href=&quot;https://www.anaconda.com/products/individual&quot;&gt;ici&lt;/a&gt;. Choisissez la version 64bit graphique correspondant à votre système d’installation, puis cliquez sur l’installeur.&lt;/p&gt;

&lt;p&gt;Lors de l’installation vous pourrez choisir de faire une installation uniquement pour vous ou pour tous les utilisateurs. Choisissez &lt;strong&gt;pour tous les utilisateurs&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;de personnaliser votre installation&lt;/strong&gt;. Vous aurez une option, initialement cochée, qui fera en sorte qu’anaconda soit votre distribution python par défaut. Personnellement je décoche cette option car je gère mes version de python moi-même. Si vous être un 1A ou un 2A novice, laissez là cochée. Si vous êtes un 3A DFS, décochez là.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Si vous avez une ancienne version d’anaconda et que vous souhaitez installer une mise à jour, il vous faudra commencer par supprimer le dossier contenant l’ancienne version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Anaconda change le chemin par défaut python pour que ce soit celui d’anaconda qui soit utilisé.&lt;/p&gt;

  &lt;p&gt;Sous mac et linux cela se passe en modifiant le fichier de configuration du shell (entre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda initialize&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;test-de-la-distribution&quot;&gt;test de la distribution&lt;/h4&gt;

&lt;p&gt;Anaconda a installé des choses, en particulier l’application &lt;em&gt;Anaconda-Navigator&lt;/em&gt; qui vous permet de lancer toutes les applications liées à Anaconda.&lt;/p&gt;

&lt;p&gt;Lancez l’application &lt;em&gt;Notebook&lt;/em&gt; puis :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;créez un nouveau notebook &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;dans la cellule tapez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(&quot;Hello world!&quot;)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;cliquez sur l’icone &lt;em&gt;Exécuter&lt;/em&gt; sur la bannière de titre ou appuyer sur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shift + entrée&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Vous devriez voir le texte &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hello World&lt;/code&gt; en sortie de votre cellule.&lt;/p&gt;

&lt;h3 id=&quot;anaconda-avec-un-terminal&quot;&gt;anaconda avec un terminal&lt;/h3&gt;

&lt;p&gt;Dans l’&lt;em&gt;anaconda navigator&lt;/em&gt;, cliquez sur &lt;em&gt;Environnements&lt;/em&gt; dans le menu de gauche (c’est le deuxième choix, après &lt;em&gt;Home&lt;/em&gt; et avant &lt;em&gt;Learning&lt;/em&gt;).&lt;/p&gt;

&lt;p&gt;Vous devez avoir un unique environnement : &lt;em&gt;base (root)&lt;/em&gt;. Un environnement est un interpréteur python et tous ses packages installés. On aura parfois envie de créer ses propres environnements pour installer soit une version spécifique de python, soit n’installer que certains packages.&lt;/p&gt;

&lt;p&gt;Pour l’instant utilisons l’environnement de base. En cliquant sur le triangle vert à droite de l’environnement &lt;em&gt;base (root)&lt;/em&gt;, vous pouvez cliquer sur &lt;em&gt;open terminal&lt;/em&gt;, ce qui ouvrira un terminal. Une fois le terminal ouvert, remarquez qu’à gauche de l’invit de commande vous avez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(base)&lt;/code&gt; d’acrit. Ceci montre quel environnement python vous avez.&lt;/p&gt;

&lt;p&gt;Vos pouvez &lt;a href=&quot;https://docs.anaconda.com/anaconda/user-guide/tasks/integration/python-path/&quot;&gt;connaitre l’interpréteur&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gestionnaire-package-id&quot;&gt;installation via un gestionnaire de package&lt;/h3&gt;

&lt;p&gt;Une bonne pratique d’installation de logiciel sur son ordinateur est d’utiliser un gestionnaire de package. Il vous permet de savoir exactement ce qui est utilisé, quelle version, et surtout gère tout seul les mise à jours.&lt;/p&gt;

&lt;p&gt;C’est un peut plus compliqué qu’utiliser anaconda mais si vous voulez faire de l’informatique sérieuse ou sérieusement de l’informatique, il est conseillé d’utiliser cette solution.&lt;/p&gt;

&lt;details&gt;&lt;summary&gt;sous mac&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;On utilise &lt;a href=&quot;https://brew.sh/index_fr&quot;&gt;brew&lt;/a&gt;. Toutes les commandes se font via le &lt;a href=&quot;https://www.howtogeek.com/682770/how-to-open-the-terminal-on-a-mac/&quot;&gt;terminal&lt;/a&gt; (il est dans Applications/utilitaires)&lt;/p&gt;

&lt;p&gt;Une fois brew installé, vous pouvez installer python en tapant la commande :&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;/div&gt;&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;sous windows&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Pour l’instant téléchargez le tout depuis le site de python. Il se placera automatiquement dans les logiciels installés. C’est pas super mais ça marche.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;sous linux&lt;/summary&gt;&lt;div&gt;
&lt;blockquote class=&quot;danger&quot;&gt;
  &lt;p&gt;TBD : avec apt-get ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;&lt;/details&gt;

&lt;h2 id=&quot;interpreteur-id&quot;&gt;utiliser l’interpréteur python&lt;/h2&gt;

&lt;h3 id=&quot;ouvrir-terminal-id&quot;&gt;terminal&lt;/h3&gt;

&lt;p&gt;Pour utiliser l’interpréteur python, on ne peut pas directement double-cliquer sur son nom car il ne possède pas d’interface graphique : il faut l’exécuter en mode ligne de commande, via un terminal (pour faire mode, on peut dire &lt;a href=&quot;https://fr.wikipedia.org/wiki/Interface_en_ligne_de_commande&quot;&gt;CLI&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Trouver l’application terminal :&lt;/p&gt;

&lt;details&gt;&lt;summary&gt;sous mac&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Le &lt;a href=&quot;https://www.howtogeek.com/682770/how-to-open-the-terminal-on-a-mac/&quot;&gt;terminal&lt;/a&gt; se trouve dans /Application/utilitaires (finder : menu Aller &amp;gt; Applications puis allez dans le dossier utilitaires). Vous pouvez ensuite cliquer sur l’icône terminal.&lt;/p&gt;

&lt;p&gt;Le terminal est super utile, ça vaut le coup d’ajouter un raccourci dans la barre du finder.&lt;/p&gt;

&lt;/div&gt;&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;sous linux&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Si vous êtes sous linux vous devriez savoir ouvrir un terminal. C’est souvent une application avec une télévision comme icône.&lt;/p&gt;

&lt;/div&gt;&lt;/details&gt;

&lt;details&gt;&lt;summary&gt;sous windows&lt;/summary&gt;&lt;div&gt;
&lt;p&gt;Vous pouvez utiliser l’invit de commande mais c’est une torture (tapez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cmd&lt;/code&gt; dans l’invit de recherche), ou utiliser le &lt;a href=&quot;https://docs.microsoft.com/fr-fr/powershell/scripting/overview?view=powershell-7.1&quot;&gt;power-shell&lt;/a&gt; qui est semblable au terminal du mac/unix. Pour ouvrir une fenêtre powersheel, il y a &lt;a href=&quot;https://lecrabeinfo.net/ouvrir-powershell-sur-windows-10.html&quot;&gt;plusieurs possiblités&lt;/a&gt;&lt;/p&gt;

&lt;/div&gt;&lt;/details&gt;

&lt;p&gt;Une fois l’application trouée, exécutez là. Une fenêtre doit s’ouvrir, vous permettant de taper des commandes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;N’ayez pas peur. C’est simple à utiliser. On tape une commande, on appuie sur entrée et la commande s’exécute. 
Vous pouvez a priori utiliser votre ordinateur uniquement avec un terminal. L’interface graphique n’est qu’un ajout sympathique mais non indispensable à l’utilisation d’n ordinateur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Si vous voulez utiliser pleinement votre ordinateur, voir devenir informaticien/ne plus tard, il est important que vous sachiez vous en servir (en plus d’avoir cette petite sensation d’interagir directement avec la matrice lorsque l’on tape des commande en mode CLI). Donc autant l’utiliser le plus souvent possible histoire de s’habituer.&lt;/p&gt;

&lt;h3 id=&quot;exécution-de-linterpréteur-python&quot;&gt;exécution de l’interpréteur python&lt;/h3&gt;

&lt;p&gt;L’interpréteur python s’appelle soit &lt;em&gt;“python”&lt;/em&gt;, soit &lt;em&gt;“python3”&lt;/em&gt;. Regardez celui que vous possédez.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sous windows, c’est souvent &lt;em&gt;“python”&lt;/em&gt; qu’il s’appelle, sous mac et linux c’est &lt;em&gt;“python3”&lt;/em&gt;. Pour le reste du tuto, je considérerai que c’est &lt;em&gt;“python”&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dans un terminal, tapez la commande :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si ça a marché, l’interpréteur aura donné sa version (&lt;strong&gt;assurez vous que c’est bien python 3&lt;/strong&gt;) et vous donnera une invite de commande qui commence par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;.Vous pouvez taper une ligne de python. Lorsque vous taperez sur entrée, votre ligne sera interprétée en python et donnera le résultat.&lt;/p&gt;

&lt;p&gt;Par exemple tapez : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print(coucou !)&lt;/code&gt;et l’interpréteur vous rendra &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;coucou !&lt;/code&gt;. On ne pourrait utiliser python que comme ça, mais ce n’est pas très pratique.&lt;/p&gt;

&lt;p&gt;Pour quitter l’interpréteur tapez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quit()&lt;/code&gt; puis appuyez sur la touche entrée.&lt;/p&gt;

&lt;h3 id=&quot;version-de-linterpréteur-python&quot;&gt;version de l’interpréteur python&lt;/h3&gt;

&lt;p&gt;Beaucoup de programme supportent d’être lancé avec des paramètres, que l’on ajoute à la suite du nom. Par exemple pour connaître la version de l’interpréteur, on tape dans un terminal :&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Chez moi ça rend :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Python 3.9.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pour connaitre tous les paramètres possible, on peut soit se référer à la &lt;a href=&quot;https://docs.python.org/3/using/cmdline.html&quot;&gt;documentation&lt;/a&gt;, soit taper : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python --help&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;emplacement-de-votre-interpréteur&quot;&gt;emplacement de votre interpréteur&lt;/h3&gt;

&lt;p&gt;Dans un terminal tapez la commande :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;which python&lt;/code&gt; sur un mac ou un linux,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;where python&lt;/code&gt; sur un windows,&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La commande devrait vous rendre l’emplacement sur votre disque dur de votre interpréteur. Vérifiez le avec un explorateur de fichier.&lt;/p&gt;

&lt;h2 id=&quot;packages&quot;&gt;packages&lt;/h2&gt;

&lt;p&gt;Python vient avec une &lt;a href=&quot;https://docs.python.org/3/library/&quot;&gt;liste de packages&lt;/a&gt; bien fournie. On peut les utiliser via le mot clé &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt; en python. Il en existe une foultitude d’autres qui permettent d’aider à coder rapidement. La liste des différents packages est disponible sur &lt;a href=&quot;https://pypi.org/&quot;&gt;https://pypi.org/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;installation-avec-pip&quot;&gt;installation avec pip&lt;/h3&gt;

&lt;p&gt;Pour installer de nouveaux packages python, on utilise la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;si votre interpréteur python est &lt;em&gt;“python3”&lt;/em&gt;, vous devez utiliser la commande &lt;em&gt;“pip3”&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Testez le en ouvrant un terminal et en tapant :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La commande devrait vous rendre le numéro de version de pip ainsi que le chemin du programme python qui lui est associé.&lt;/p&gt;

&lt;p&gt;Les packages déjà installé par pip seront visible avec la commande :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si vous avez une distribution anaconda, vous devriez avoir plein de choses, sinon, beaucoup moins.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Il est crucial de vérifier que pip est bien lié à l’interpréteur python que vous voulez. Sinon, vous installerez des packages pour un mauvais interpréteur.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On peut maintenant utiliser pip pour installer un nouveau package. Nous allons installer &lt;a href=&quot;https://pypi.org/project/black/&quot;&gt;black&lt;/a&gt; qui rendra joli tous nos programmes python. Dans un terminal tapez :&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;black
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Une fois l’installation terminée, black devrait apparaitre dans la liste des packages installés (vous pouvez le voir avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip list&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&quot;où-sont-les-packages-&quot;&gt;où sont les packages ?&lt;/h3&gt;

&lt;p&gt;Les répertoires où python va cherchez les packages est dans la liste &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sys.path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;vous pouvez le voir en exécutant le code :&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dossier&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dossier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;chez moi, ce programme rend :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python39.zip
/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9
/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/lib-dynload
/usr/local/lib/python3.9/site-packages
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il y a plusieurs dossiers :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9”&lt;/em&gt; contient les packages de bibliothèque standard (il contient par exemple un fichier &lt;em&gt;“random.py”&lt;/em&gt; qui contient le code du package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“/usr/local/Cellar/python@3.9/3.9.6/Frameworks/Python.framework/Versions/3.9/lib/python3.9/lib-dynload”&lt;/em&gt; contient les packages python qui ne sont pas écrit en python mais en C&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“/usr/local/lib/python3.9/site-packages”&lt;/em&gt; qui contient les packages qui seront installés par pip.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;La gestion des packages peut être compliquée. Normalement, si vous vous y prenez comme indiqué ici et en utilsant votre ordinateur personnel, tout devrait bien se passer. Si cela commence à ne plus aller, vous pouvez essayer d’installer les packages à un autre en endroit en suivant &lt;a href=&quot;https://opensource.com/article/19/4/managing-python-packages&quot;&gt;ce tuto&lt;/a&gt;, ou, comme on le fera plus tard en utilisant un environnement virtuel. Mais, dans le doute, consultez un prof qui s’y connait.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;éditeur&quot;&gt;éditeur&lt;/h2&gt;

&lt;p&gt;Il en existe une multitude. Prenez en un qui permettent non seulement d’écrire aisément du code python mais aussi d’exécuter facilement tout ce qui va avec écrire du code :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;coloration syntaxique&lt;/li&gt;
  &lt;li&gt;nommage et renommage de variables sur tout un projet&lt;/li&gt;
  &lt;li&gt;lancer des tests&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;J’en conseille 2 :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;visual studio code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jetbrains.com/fr-fr/pycharm/&quot;&gt;pycharm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Il existe également d’autres façon d’utiliser python, en mode interactif par exemple en utilisant &lt;a href=&quot;https://jupyter.org/&quot;&gt;jupyter&lt;/a&gt; avec anaconda, ou encore &lt;a href=&quot;https://colab.research.google.com&quot;&gt;colab&lt;/a&gt;.&lt;/p&gt;</content><author><name>François Brucker</name></author><category term="tutos" /><category term="python" /><category term="installation" /><category term="python" /><summary type="html">Comment installer et utiliser python sur son ordinateur. On y verra différentes solutions.</summary></entry><entry><title type="html">Bases de python</title><link href="/cours_informatique/tutos/python/2021/08/19/bases-de-python.html" rel="alternate" type="text/html" title="Bases de python" /><published>2021-08-19T00:00:00+00:00</published><updated>2021-08-19T00:00:00+00:00</updated><id>/cours_informatique/tutos/python/2021/08/19/bases-de-python</id><content type="html" xml:base="/cours_informatique/tutos/python/2021/08/19/bases-de-python.html">&lt;p&gt;Notions de base du langage python. Ce n’est cependant pas un cours, on y reprend juste les différentes notions à connaître ainsi que les principales structres de données à utiliser.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;On supposeras que vous ayez un interpréteur python qui fonctionne ainsi qu’un éditeur de texte pour écrire des programmes.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;On utilisera ici la version 3 de python (plus personne — vraiment — ne devrait utiliser la version 2) dans sa dernière itération (3.9.6 à l’heure où je tape ces caractères), mais n’importe quelle version 3 de python devrait faire fonctionner les exemples de ce tuto. Les liens vers la documentation officielle seront toujours ceux de la dernière version stable de python.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Un petit rappel des bases de la programmation en python que vous êtes sensés savoir pour suivre les différents cours d’informatique. On y ajoute quelques exercices pour être sur que l’on a compris.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/&quot;&gt;https://docs.python.org/3/&lt;/a&gt; toutes les réponses et bien plus encore s’y trouvent.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nous vous recommendons également de faire le &lt;a href=&quot;https://docs.python.org/3/tutorial/index.html&quot;&gt;tutoriel&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;les-données&quot;&gt;Les données&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#built-in-types&quot;&gt;Documentation correspondante&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Les commentaires en Python se font à l’aide de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;les-5-classes-de-base&quot;&gt;Les 5 classes de base&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Chaînes de caractères&lt;/li&gt;
  &lt;li&gt;Entiers&lt;/li&gt;
  &lt;li&gt;Réels&lt;/li&gt;
  &lt;li&gt;Complexes (la notation utilise j à la place de i)&lt;/li&gt;
  &lt;li&gt;Booléens&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Afin de connaître la classe d’un objet, on peut utiliser la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt; :&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Rendra : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;class 'int'&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On peut créer des objets de classes différentes avec des fonctions telles que:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#str&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str()&lt;/code&gt;&lt;/a&gt; qui représentera les objets &lt;em&gt;chaîne de caractères&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#float&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;float()&lt;/code&gt;&lt;/a&gt; qui représentera les objets &lt;em&gt;nombres réels&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#int&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int()&lt;/code&gt;&lt;/a&gt; qui représentera les objets &lt;em&gt;nombres entiers&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#complex&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complex()&lt;/code&gt;&lt;/a&gt; qui représentera les objets &lt;em&gt;nombres complexes&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/functions.html#bool&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool()&lt;/code&gt;&lt;/a&gt; qui représentera les objets &lt;em&gt;booléens&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Par exemple, en tapant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str(42)&lt;/code&gt;, on rend un objet de classe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;str&lt;/code&gt; (chaîne de caractères) à partir d’un objet de classe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; (entier).&lt;/p&gt;

&lt;h2 id=&quot;variables&quot;&gt;Variables&lt;/h2&gt;

&lt;p&gt;Une variable est un nom auquel est associé un objet. Pour associer un nom à un objet on utilise l’opérateur d’affectation &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; tel que:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nom = objet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A gauche de l’opérateur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; se trouve un &lt;strong&gt;nom&lt;/strong&gt; (en gros, quelque chose ne pouvant commencer par un nombre) et à droite un &lt;strong&gt;objet&lt;/strong&gt;. Dans toute la suite du programme, dès que l’interpréteur python rencontrera le nom, il le remplacera par l’objet.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Un nom n’est &lt;strong&gt;PAS&lt;/strong&gt; une chaîne de caractères. Une chaîne de caractère est un objet alors qu’un nom n’est qu’un alias vers un objet.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il est important de comprendre que l’opérateur d’affectation = n’est pas symétrique. À gauche, des noms et à droite, des objets.&lt;/p&gt;

&lt;p&gt;Attardons nous un moment sur ces notions car elles seront cruciales plus tard pour appréhender les possibilités offertes par les objets.&lt;/p&gt;

&lt;p&gt;Considérons le programme suivant :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/cours_informatique/assets/tutos/bases-de-python/nom_et_objets.png&quot; alt=&quot;association nom variable&quot; style=&quot;margin: auto;display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La figure montre le résultat après chaque instruction. On voit qu’un même objet peut parfaitement
avoir plusieurs noms. Cependant, à un nom correspond un unique objet. Les objets qui n’ont plus de
noms sont supprimés à intervalles réguliers (c’est ce qu’on appelle le &lt;a href=&quot;https://towardsdatascience.com/memory-management-and-garbage-collection-in-python-c1cb51d1612c&quot;&gt;garbage collector&lt;/a&gt;) puisque l’on ne peut plus y accéder.&lt;/p&gt;

&lt;p&gt;Le mécanisme décrit précédemment (remplacement des noms par les objets référencés avant exécution
de l’instruction) montre que l’on peut affecter plusieurs noms en même temps, comme le montre l’exemple
suivant :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;les-structures-de-données&quot;&gt;Les structures de données&lt;/h2&gt;

&lt;h3 id=&quot;les-listes&quot;&gt;Les listes&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#more-on-lists&quot;&gt;https://docs.python.org/3/tutorial/datastructures.html#more-on-lists&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;création-directe&quot;&gt;Création directe&lt;/h4&gt;

&lt;p&gt;On peut créer une liste directement:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Soit en créant une liste vide puis en ajoutant des éléments un à un. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l = []&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l.append(1)&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Soit en créant la liste déjà pré-remplie. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l = [1, 2, True, &quot;Hello World&quot;]&lt;/code&gt;. Cette liste contient 4 éléments et est &lt;strong&gt;indexée à partir de 0&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;La fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len()&lt;/code&gt; permet d’obtenir la longueur de la liste. Sur le dernier exemple, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len(l)&lt;/code&gt; rend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;4&lt;/code&gt;.
On peut alors accéder aux éléments de la liste à l’aide d’un indice variant entre &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len(l) - 1&lt;/code&gt;. Ainsi  avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l[3]&lt;/code&gt; on obtient la chaîne de caractère “Hello World”.&lt;/p&gt;

&lt;h4 id=&quot;création-à-laide-de-range&quot;&gt;Création à l’aide de range()&lt;/h4&gt;

&lt;p&gt;La fonction &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#range&quot;&gt;range&lt;/a&gt; permet de créer des listes de nombres.&lt;/p&gt;

&lt;h4 id=&quot;ajout-suppression-déléments-dune-liste&quot;&gt;Ajout, suppression d’éléments d’une liste&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;append&lt;/li&gt;
  &lt;li&gt;insert&lt;/li&gt;
  &lt;li&gt;del&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Attention à remove, extend ou pop&lt;/p&gt;

&lt;p&gt;Voir la &lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#more-on-lists&quot;&gt;documentation du tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;copie-dune-sous-liste&quot;&gt;Copie d’une sous-liste&lt;/h4&gt;

&lt;p&gt;On peut copier une partie d’une liste.
Pour &lt;strong&gt;copier la liste l à partir de l’indice i jusqu’à l’indice j avec un pas de k&lt;/strong&gt; par exemple : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l[i:j:k]&lt;/code&gt;
Il n’est pas nécessaire de renseigner tous les champs.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Essayez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l[::3]&lt;/code&gt; ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l[1::5]&lt;/code&gt; etc… (il faut bien évidemment des listes assez longues).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;les-dictionnaires&quot;&gt;Les dictionnaires&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/datastructures.html#dictionaries&quot;&gt;https://docs.python.org/3/tutorial/datastructures.html#dictionaries&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&quot;&gt;https://docs.python.org/3/library/stdtypes.html#mapping-types-dict&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Un dictionnaire (ou &lt;a href=&quot;http://fr.wikipedia.org/wiki/Tableau_associatif&quot;&gt;tableau associatif&lt;/a&gt;) permet d’associer des clés à des valeurs, ces clés pouvant être des chaines de caractères ou des nombres. C’est en gros comme une ‘liste’ où l’on remplace les indices par à peu près ce que l’on veut.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#on crée un dictionnaire vide
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;quarante deux&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#on associe à la clé &quot;quarante deux&quot; la valeur 42
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pi&quot;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#on associe à la clé 3.14 la valeur &quot;pi&quot;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;quarante deux&quot;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cle&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cle :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;valeur :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Attention&lt;/strong&gt; : Un dictionnaire n’est pas ordonné, L’ordre dans lequel les valeurs sont examniés dans une boucle for par exmple n’est pas défini.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;les-ensembles--set&quot;&gt;Les ensembles : set&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.htm#set&quot;&gt;https://docs.python.org/3/library/stdtypes.htm#set&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Un ensemble permet de garder des données en mémoire de manière non indexée. Contrairement aux listes, où l’on rangeait les éléments dans des cases distinctes, on ne peut &lt;strong&gt;pas&lt;/strong&gt; accéder aux éléments d’un ensemble &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d[i]&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;notion-dobjets-mutables&quot;&gt;Notion d’objets mutables&lt;/h3&gt;

&lt;p&gt;Les objets que nous avons rencontrés sont mutables, c’est à dire que lorsque on crée une liste &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l = [1, 2, 3]&lt;/code&gt;, il est toujours possible de changer la valeur d’un indice, ou d’ajouter un élément.&lt;/p&gt;

&lt;p&gt;Cela n’est toutefois pas possible avec les &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#tuples&quot;&gt;tuples&lt;/a&gt; par exemple.&lt;/p&gt;

&lt;p&gt;Un tuple peut se créer de la manière suivante :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Essayez maintenant des commandes telles que :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cela nous renvoie alors des erreurs.&lt;/p&gt;

&lt;p&gt;Pour ajouter un élément, il faut créer un autre tuple :&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;t2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le &lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#frozenset&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frozenset&lt;/code&gt;&lt;/a&gt; est un &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set&lt;/code&gt; (ensemble), mais cette fois non mutable.&lt;/p&gt;

&lt;h1 id=&quot;structures-de-contrôle&quot;&gt;Structures de contrôle&lt;/h1&gt;

&lt;h2 id=&quot;comparaisons&quot;&gt;Comparaisons&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/stdtypes.html#comparisons&quot;&gt;https://docs.python.org/3/library/stdtypes.html#comparisons&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;blocs-id&quot;&gt;Blocs&lt;/h2&gt;

&lt;p&gt;On a souvent besoin de n’exécuter un certain bout de code que si une comparaison particulière est vraie (True). Ce bout de code est appelé &lt;em&gt;bloc&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tous les blocs sont définis de la même manière :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ce qui va identifier le bloc pour son exécution (une condition, son nombre d’exécution, son nom).&lt;/li&gt;
  &lt;li&gt;Les instructions le constituant.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Pour séparer les blocs les un des autres, et savoir ce qui le définit, le langage Python utilise l’indentation(4 espaces): un bloc est donc une suite d’instructions ayant la même indentation.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A quelle heure on mange ?&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Question :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Reponse :&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;question&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;la vie, l’univers et le reste&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reponse_partielle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reponse_partielle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;je ne sais pas.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ce code contient 3 blocs : le bloc principal, puis les 2 blocs de conditions (respectivement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt;).&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;L’indentation est  &lt;strong&gt;primordiale&lt;/strong&gt; en python.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Nous allons utiliser la convention classique : chaque bloc sera indenté de 4 espaces supplémentaire par
rapport au bloc parent. Pour ne pas passer son temps à compter les espaces à ajouter pour chaque bloc,
on pourra utiliser la &lt;strong&gt;touche tabulation&lt;/strong&gt; en modifiant son fonctionnement (remplacement du caractère
tabulation par des espaces, cela est déjà prédéfini avec PyCharm) et est disponible dans tout bon éditeur.&lt;/p&gt;

&lt;p&gt;En python, toute ligne définissant un nouveau bloc doit être terminée par le caractère &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;conditions-sisinon-sisinon-ifelifelse&quot;&gt;Conditions si/sinon si/sinon (if/elif/else)&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#the-if-statement&quot;&gt;https://docs.python.org/3/reference/compound_stmts.html#the-if-statement&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Exemple :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Strictement negatif&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;vaut Zero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pair strictement positif&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;impair strictement positif&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il est à noter que &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;elif&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;else&lt;/code&gt; sont optionnels.&lt;/p&gt;

&lt;h2 id=&quot;boucle-while&quot;&gt;Boucle while&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#the-while-statement&quot;&gt;https://docs.python.org/3/reference/compound_stmts.html#the-while-statement&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On peut aussi inclure des blocs dans des blocs comme le montre le programme suivant :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;b vaut 2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;boucle-for&quot;&gt;Boucle for&lt;/h2&gt;

&lt;h3 id=&quot;les-itérateurs&quot;&gt;Les itérateurs&lt;/h3&gt;

&lt;p&gt;Pour faire simple, les itérateurs sont des objets qui permettent de créer des suites de données.
Prenons un exemple connu: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;range permet de créer des itérateurs : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range(10)&lt;/code&gt; est un itérateur qui va renvoyer les valeurs de 0 à 9.&lt;/p&gt;

&lt;p&gt;Pour utiliser &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;, il faut un itérateur tel que: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for x in mon_iterateur&lt;/code&gt; est la syntaxe.&lt;/p&gt;

&lt;p&gt;Exemple :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mon_iterateur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mon_iterateur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Essayez ce code et comprenez le : les itérateurs sont de puissants objets python.&lt;/p&gt;

&lt;p&gt;Vous pouvez créer votre propre itérateur à l’aide de l’instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yield&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mon_iterateur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mon_iterateur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ce qui va s’afficher sera:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0
5
10
15
20
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On peut également boucler sur une liste, qui est un &lt;strong&gt;objet itérable&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Jet fuel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;can't&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;melt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;steel beams&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mot&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;méthodes-fonctions-et-modules&quot;&gt;Méthodes, fonctions et modules&lt;/h1&gt;

&lt;h2 id=&quot;les-fonctions&quot;&gt;Les fonctions&lt;/h2&gt;

&lt;h3 id=&quot;motivations&quot;&gt;Motivations&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/reference/compound_stmts.html#function-definitions&quot;&gt;https://docs.python.org/3/reference/compound_stmts.html#function-definitions&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il n’est jamais bon de copier/coller un bout de programme qui se répète plusieurs fois (corriger un problème dans ce bout de code reviendrait à le corriger autant de fois qu’il a été dupliqué…). Il est de plus souvent utile de séparer les éléments logiques d’un programme en unités autonomes, ceci rend le programme plus facile à relire.&lt;/p&gt;

&lt;p&gt;Pour cela, on utilise des &lt;em&gt;fonctions&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Une fonction est un &lt;a href=&quot;#blocs-id&quot;&gt;bloc&lt;/a&gt; auquel on donne un nom (le nom de la fonction) qui peut être exécuté lorsqu’on l’invoque par son nom.&lt;/p&gt;

&lt;p&gt;La partie de programme suivant définit une fonction:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bonjour&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Salutations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La première ligne est la définition du bloc fonction. Il contient :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;un mot clé spécial précisant que l’on s’apprête à définir une fonction: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;def&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;le nom de la fonction. Ici &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bonjour&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;des parenthèses qui pourront contenir des paramètres (on verra ça plus tard)&lt;/li&gt;
  &lt;li&gt;le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;:&lt;/code&gt; qui indique que la ligne d’après va commencer le bloc proprement dit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ensuite vient le bloc fonction en lui-même qui ne contient qu’une seule ligne.&lt;/p&gt;

&lt;p&gt;Si on exécute le bloc précédent, il ne se passe rien. En effet on n’a fait que définir la fonction. Pour l’utiliser, ajoutez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bonjour()&lt;/code&gt; à la suite du bloc.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Une &lt;strong&gt;fonction&lt;/strong&gt; s’utilise toujours en faisant suivre son nom d’une parenthèse contenant ses paramètres séparés par une virgule (notre fonction n’a pour l’instant pas de paramètres). Donner juste son nom ne suffit pas à l’invoquer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;paramètres-dune-fonction&quot;&gt;Paramètres d’une fonction&lt;/h3&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plus_moins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nombre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Supérieur à 42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Inférieur à 42&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette fonction nécessite donc un paramètre pour être invoquée. Testez alors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;plus_moins(17)&lt;/code&gt;.
La variable nombre sera associée à l’objet entier de valeur 17 dans la fonction. La variable nombre n’existe que dans la fonction.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Les &lt;em&gt;paramètres&lt;/em&gt; d’une fonction sont des &lt;strong&gt;noms&lt;/strong&gt; de variables qui ne seront connus qu’à l’intérieur de la fonction. À l’exécution de la fonction, le nom de chaque paramètre est associé à l’objet correspondant.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;retour-dune-fonction&quot;&gt;Retour d’une fonction&lt;/h3&gt;

&lt;p&gt;Toute fonction peut rendre une valeur. On utilise le mot-clef &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; suivi de la valeur à rendre pour cela. Le fonction suivante rend le double de la valeur de l’objet passé en paramètre:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valeur&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Il ne sert à rien de mettre des instructions après une instruction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return&lt;/code&gt; car dès qu’une fonction exécute cette instruction, elle s’arrête en rendant l’objet en paramètre. Le retour d’une fonction est pratique pour calculer des choses et peut ainsi être affecté à une variable.&lt;/p&gt;

&lt;p&gt;Ainsi, avec la fonction double précédemment définie, testez :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;21&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Le code précédent exécute la fonction de nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; avec comme paramètre un entier de valeur 21. La fonction commence par associer à une variable nommée &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valeur&lt;/code&gt; l’objet passé en paramètre (ici un entier de valeur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;21&lt;/code&gt;), puis crée une variable de nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; à laquelle est associée un entier de valeur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;42&lt;/code&gt; et enfin se termine en retournant comme valeur l’objet de nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt;. Les variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;valeur&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; définies à l’intérieur de la fonction sont ensuite effacées (pas les objets, seulement les noms).&lt;/p&gt;

&lt;p&gt;Cette valeur retournée est utilisée par la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;print&lt;/code&gt; pour être affichée à l’écran.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Les noms de paramètres d’une fonction et les variables déclarée à l’intérieur de la fonction n’existent qu’à l’intérieur de celle-ci. En dehors de ce blocs, ces variables n’existent plus.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;fonctions-vs-méthodes&quot;&gt;Fonctions v.s. méthodes&lt;/h3&gt;

&lt;p&gt;Python vient avec de nombreuses fonctions que l’on peut utiliser. Vous en connaissez déjà comme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;range&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;len&lt;/code&gt;, ou encore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;type&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ne confondez pas fonctions et méthodes. Une fonction s’exécute toute seule alors qu’une méthode a besoin d’un objet sur lequel elle s’applique (celui avant le &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.&lt;/code&gt;). Vous pouvez voir ça comme un 1er paramètre indispensable à l’exécution d’une méthode. Considérez le micro-programme suivant:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;La première ligne exécute une &lt;em&gt;fonction&lt;/em&gt; (range) avec un paramètre qui rend une liste. La seconde instruction est une &lt;em&gt;méthode&lt;/em&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt;) qui s’applique à l’objet de nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ma_liste&lt;/code&gt; et qui a un paramètre (ici un entier valant &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Le point un peu délicat est que certaines méthodes ne rendent rien et modifient l’objet sur lequel elle est appliquée, c’est le cas des méthodes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert&lt;/code&gt; ou encore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reverse&lt;/code&gt;, alors que d’autres rendent des objets, c’est le cas de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt; par exemple.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;coucou&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;un_indice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coucou&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;un_indice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ma_liste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;un_indice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;visibilité-dun-objet&quot;&gt;Visibilité d’un objet&lt;/h2&gt;

&lt;p&gt;Les noms des objets sont accessibles à l’intérieur du ‘‘bloc unitaire’’ dans lequel ils sont déclarés ainsi que dans les blocs unitaires contenus dans celui-ci. Les blocs unitaires sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;les fonctions,&lt;/li&gt;
  &lt;li&gt;les modules (nous verrons cela),&lt;/li&gt;
  &lt;li&gt;les classes (que nous ne verrons pas).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les variables définies dans une fonction cachent les variables définies dans des blocs supérieurs. Ainsi,
le code suivant imprime 42 puisque la variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; déclarée dans le bloc unitaire de la fonction n’existe plus dans son bloc parent. La variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; valant 42 est masquée dans la fonction par une nouvelle variable de nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; valant 24.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;De la même manière, que donne le programme suivant ? :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parametre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;parametre&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parametre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Les noms déclarés dans une fonction, y compris ses paramètres, restent dans la fonction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;récursion&quot;&gt;Récursion&lt;/h2&gt;

&lt;h3 id=&quot;modification-dobjets-dans-une-fonction&quot;&gt;Modification d’objets dans une fonction&lt;/h3&gt;

&lt;p&gt;Dans un programme récursif, on a souvent besoin de modifier le même objet plusieurs fois. Même si la fonction récursive ne rend rien. Pour cela, on doit modifier les objets passés en paramètres. Pour comprendre comment cela marche, considérez la fonction suivante :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ajoute_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liste_en_parametre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maximum_liste&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;liste_en_parametre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;liste_en_parametre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;maximum_liste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cette fonction ajoute à la fin d’une liste passée en paramètre son maximum (au passage, on a apprit une nouvelle fonction, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max&lt;/code&gt;.
regardons le programme suivant qui utilise cette fonction :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ajoute_max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/cours_informatique/assets/tutos/bases-de-python/obj_nom.png&quot; alt=&quot;nom et objets&quot; style=&quot;margin: auto;display: block;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La figure précédente montre ce qu’il s’est passé dans le monde des noms et des objets. Il reste un objet sans nom après l’exécution de la fonction (un entier valant 9), il est détruit. On a pu ainsi modifier un objet sans utiliser de retour de fonction. C’est une technique puissante mais à n’utiliser qu’à bon escient.&lt;/p&gt;

&lt;h2 id=&quot;modules&quot;&gt;Modules&lt;/h2&gt;

&lt;p&gt;Un &lt;em&gt;module&lt;/em&gt; (aussi appelé &lt;em&gt;bibliothèque&lt;/em&gt; ou &lt;em&gt;library&lt;/em&gt;) est un ensemble de fonctions utiles, utilisables dans de nombreux programmes. Plutôt que de refaire à chaque fois ces fonctions ou (c’est pire) de les copier/coller dans chaque programme, on les importe directement pour les utiliser.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Il existe de nombreux modules, réalisant une foultitude d’opérations. Avant de se mettre à coder quelque chose, commencez toujours par vérifier (google
est votre ami) s’il n’existe pas un module tout fait, vous gagnerez du temps. Python en fournit déjà de &lt;a href=&quot;https://docs.python.org/3/library/index.html&quot;&gt;nombreux&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Pour utiliser un module, il faut commencer par l’importer avec la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;. Par exemple avec le module &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;math&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;importation-directe-du-module&quot;&gt;Importation directe du module&lt;/h3&gt;

&lt;p&gt;On met le nom complet avant chaque appel :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pi_sur_deux&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#PI est défini dans le module math
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi_sur_deux&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#on utilise la fonction cosinus du module math
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;importation-dune-méthode-particulière&quot;&gt;Importation d’une méthode particulière.&lt;/h3&gt;

&lt;p&gt;Ceci peut être dangereux si des fonctions différentes possèdent le même nom.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#importation directe de cos et de pi
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;importation-de-toutes-les-fonctions-du-modules&quot;&gt;Importation de toutes les fonctions du modules&lt;/h3&gt;

&lt;p&gt;Déconseillée dans la plupart des cas car on ne sait pas vraiment ce qui a été importé.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modules-utiles&quot;&gt;Modules utiles&lt;/h3&gt;

&lt;p&gt;De nombreux modules existent pour python et permettent de réaliser aisément de très nombreuses tâches. Pour python, si avez les droits administrateurs on pourra utiliser l’utilitaire &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt; qui est l’installeur de package python3 (attention, si vous tapez juste pip, vous installerez des module pour la version 2 de python…).&lt;/p&gt;

&lt;p&gt;Si vous n’avez pas de droits administrateur, ou pour une utilisation plus “pro” des modules, on préfèrera créer des environnements virtuels avec &lt;em&gt;virtualenv&lt;/em&gt;, mais ceci  dépasse (de peu) le cadre de notre introduction à python.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Si vous utilisez un interpréteur qui s’appelle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; et pas &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;, il est fort possible que le programme &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;(sans le 3) soit un interpréteur de la version 2 de python. Il vous faut alors utiliser la commande &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3&lt;/code&gt;et non &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip&lt;/code&gt; (qui sera elle associée à l’interpréteur &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;le-module-random&quot;&gt;Le module random&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/random.html&quot;&gt;https://docs.python.org/3/library/random.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Regardez &lt;a href=&quot;https://python.sdv.univ-paris-diderot.fr/08_modules/#85-module-random-generation-de-nombres-aleatoires&quot;&gt;ces exemples&lt;/a&gt; pour le module random.&lt;/p&gt;

&lt;p&gt;Installé par défaut, il permet notamment de mélanger les éléments d’une liste, générer un nombre aléatoire, choisir un élément aléatoire dans une liste… Vous pouvez même simuler une loi gaussienne (si, si).&lt;/p&gt;

&lt;h4 id=&quot;openpyxl&quot;&gt;openpyxl&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://openpyxl.readthedocs.org&quot;&gt;http://openpyxl.readthedocs.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Permet de manipuler des &lt;a href=&quot;https://automatetheboringstuff.com/chapter12/&quot;&gt;fichiers excel avec python&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il s’installe avec pip : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install openpyxl&lt;/code&gt; (ou &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo pip3 install openpyxl&lt;/code&gt; suivi de votre mot de passe si vous êtes sous unix/mac).&lt;/p&gt;

&lt;h4 id=&quot;matplotlib&quot;&gt;matplotlib&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://matplotlib.org&quot;&gt;http://matplotlib.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Installé par défaut si vous utilisez l’interpréteur d’&lt;a href=&quot;https://www.anaconda.com/&quot;&gt;anaconda&lt;/a&gt;, ce module permet d’afficher des graphiques en python.&lt;/p&gt;

&lt;h4 id=&quot;jupyter&quot;&gt;Jupyter&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://jupyter.org&quot;&gt;http://jupyter.org&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Permet d’utiliser python de façon interactive (il s’installe aisément avec pip par exemple)&lt;/p&gt;

&lt;h1 id=&quot;retour-sur-les-objets&quot;&gt;Retour sur les objets&lt;/h1&gt;

&lt;p&gt;Comme on l’a vu les objets sont partout en python, qu’ils soient int, str, float, ou même des fonctions.
Si vous avez bien compris l’exemple de la récursion et de la modification d’un objet passé en paramètre, alors vous vous demandez peut-être “pourquoi ne pas envoyer une fonction en paramètre d’une autre fonction ?”&lt;/p&gt;

&lt;p&gt;Eh bien cela est tout à fait possible, exemple:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;produit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calcul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fonction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fonction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calcul&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;produit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#On envoie l'objet associé au nom 'produit' à la fonction 'calcul'
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ce programme affichera alors 42 ! Essayez-le pour vous en persuader.&lt;/p&gt;

&lt;h1 id=&quot;les-fichiers--lecture-écriture&quot;&gt;Les fichiers : lecture, écriture&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files&quot;&gt;https://docs.python.org/3/tutorial/inputoutput.html#reading-and-writing-files&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;lecture&quot;&gt;Lecture&lt;/h2&gt;

&lt;p&gt;Pour lire le fichier ligne par ligne :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fichier.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ou de façon équivalente avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;with&lt;/code&gt;, qui est la façon recommandée  car elle délimite l’utilsation du fichier dans un bloc :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fichier.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On peut aussi compter le nombre de mots dans le texte, par exemple:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;n&quot;&gt;nombre_mots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fichier.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ligne&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;nombre_mots&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nombre_mots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;écriture&quot;&gt;Écriture&lt;/h2&gt;

&lt;p&gt;Pour lire-écrire, ouvrez le fichier avec ‘r+’ au lieu de ‘r’. Pour l’écriture seule, ‘w’.&lt;/p&gt;

&lt;blockquote class=&quot;attention&quot;&gt;
  &lt;p&gt;Ouvrir en écriture un fichier existant &lt;strong&gt;l’efface&lt;/strong&gt;. Pour ajouter des choses à la fin d’un fichier on utilise ‘a’ (pour append)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Utilisez ensuite la méthode &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fichier.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'For the night is dark and full of terrors'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Augustin Agbo-Kpati</name></author><category term="tutos" /><category term="python" /><category term="langage" /><category term="python" /><summary type="html">Notions de base du langage python. Ce n’est cependant pas un cours, on y reprend juste les différentes notions à connaître ainsi que les principales structres de données à utiliser.</summary></entry><entry><title type="html">Tests unitaires en Python avec pytest et pycharm</title><link href="/cours_informatique/tutos/python/tests%20unitaires/2021/08/01/tests-unitaires.html" rel="alternate" type="text/html" title="Tests unitaires en Python avec pytest et pycharm" /><published>2021-08-01T00:00:00+00:00</published><updated>2021-08-01T00:00:00+00:00</updated><id>/cours_informatique/tutos/python/tests%20unitaires/2021/08/01/tests-unitaires</id><content type="html" xml:base="/cours_informatique/tutos/python/tests%20unitaires/2021/08/01/tests-unitaires.html">&lt;p&gt;Mise en œuvre de tests unitaires en python avec l’éditeur pycharm.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Nous devons être certains que toutes les méthodes, fonctions ou modules que nous créons sont corrects. On écrira donc des tests pour être moralement sûrs que nos programmes fonctionnent (la plupart du temps une preuve de code est illusoire).&lt;/p&gt;

&lt;p&gt;Pour éviter de retaper tous ces tests à chaque modification du code (ce qui arrive souvent lorsqu’un algorithme ou une application est utilisée longtemps) ou à chaque découverte de bug, ils sont conservés dans un fichier à part. Ceci nous permettra d’exécuter ces tests à loisir (c’est à dire très souvent) et d’être sûrs que &lt;strong&gt;tous&lt;/strong&gt; les tests seront exécutés. Ces  &lt;a href=&quot;[https://fr.wikipedia.org/wiki/Test_unitaire&quot;&gt;tests sont dit unitaires&lt;/a&gt; et sont essentiels dans toutes les pratiques courantes de code.&lt;/p&gt;

&lt;p&gt;De nombreux frameworks de tests existent pour python, le plus connu étant certainement &lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;unittest&lt;/a&gt;, ou encore &lt;a href=&quot;http://nose.readthedocs.io/en/latest/&quot;&gt;nose&lt;/a&gt;. Nous allons utiliser &lt;a href=&quot;http://pytest.org&quot;&gt;pytest&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Nota Bene :&lt;/strong&gt;
Une très bonne introduction au développement par les tests est l’inusable Test Driven Development: By Example de Kent Beck. Tous les exemples sont en revanche en Java.
Sinon en python mais orienté développement web, il y a le bon (mais il faut s’accrocher si on débute) “Test-Driven Development with Python” de Harry J.w Percival.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;un-exemple&quot;&gt;Un exemple&lt;/h1&gt;

&lt;p&gt;Créez un nouveau projet avec pycharm que l’on pourra appeler &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;essai_tests&lt;/code&gt;, puis ajoutez-y un fichier que vous nommerez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aide_mathematiques.py&lt;/code&gt;. Ce fichier contiendra le code suivant :&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entier&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour tester ce code, j’imagine que si les deux conditions suivantes sont remplies :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double(0)&lt;/code&gt; vaut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;,&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double (21)&lt;/code&gt; vaut &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;42&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ma méthode sera exacte.&lt;/p&gt;

&lt;p&gt;On utilise le mot clé &lt;a href=&quot;http://www.tutorialspoint.com/python/assertions_in_python.htm&quot;&gt;assert&lt;/a&gt; pour créer notre fonction de test.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Attention :&lt;/strong&gt;
Les fonctions de tests doivent toutes commencer par ‘‘test_’’.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Ajouter la méthode ci-après à votre fichier :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language- python&quot;&gt;
def test_double():
  assert double(0) == 0
  assert double(21) == 42

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;et exécutez là :&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;n&quot;&gt;test_double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Si tout s’est passé comme prévu, il ne s’est rien passé. Normal, l’ &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; était vérifié. Changez un des &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; de la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_double&lt;/code&gt; pour que le résultat soit faux (par exemple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert double(0) == 7&lt;/code&gt;). Le programme doit maintenant s’arrêter sur une exception. Chez moi, j’obtiens ça :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):
  File &quot;/Users/francois/Documents/pycharm/essai_tests/aide_mathematiques.py&quot;, line 10, in &amp;lt;module&amp;gt;
    test_double()
  File &quot;/Users/francois/Documents/pycharm/essai_tests/aide_mathematiques.py&quot;, line 6, in test_double
    assert double(0) == 7
AssertionError
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ainsi, si tout se passe bien, nos tests sont passés, si le programme s’arrête sur une exception de type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AssertionError&lt;/code&gt;, nos tests ne correspondent pas à la réalité. Nous sommes en face d’un bug (qu’il faut corriger).&lt;/p&gt;

&lt;h1 id=&quot;séparer-code-et-tests&quot;&gt;Séparer code et tests&lt;/h1&gt;

&lt;p&gt;Placez la fonction de test (et son exécution) dans un fichier que vous nommerez &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_aide_mathematiques.py&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Faites en sorte qu’il s’exécute sans problème (attention aux &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import&lt;/code&gt;. Vous pouvez &lt;a href=&quot;https://docs.python.org/fr/3.7/tutorial/modules.html&quot;&gt;lire la doc officielle&lt;/a&gt;,  un &lt;a href=&quot;https://www.learnpython.org/en/Modules_and_Packages&quot;&gt;petit tuto bien fait&lt;/a&gt; ou encore &lt;a href=&quot;http://sametmax.com/les-imports-en-python/&quot;&gt;le tuto de sam&amp;amp;max&lt;/a&gt; qui est un peu vieux (en particulier la partie absolue_import n’est plus du &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__future__&lt;/code&gt; mais est implémenté dans python3) mais toujours éclairant).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Attention :&lt;/strong&gt;
On séparera toujours les tests du code. Tout fichier de test commence par ‘‘test_’’.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h1 id=&quot;utilisation-de-lenvironnement-de-test-avec-pycharm&quot;&gt;Utilisation de l’environnement de test avec pycharm&lt;/h1&gt;

&lt;p&gt;Nous allons demander à l’environnement &lt;a href=&quot;http://pytest.org/latest/&quot;&gt;py.test&lt;/a&gt; d’exécuter nos tests. Il nous donnera plus d’informations sur les tests réussis ou échoués (une application normale contient des centaines de tests).&lt;/p&gt;

&lt;p&gt;Commencez par supprimer l’exécution de &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_double&lt;/code&gt; dans le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_aide_mathematiques.py&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Attention :&lt;/strong&gt;
Un fichier de tests ne doit contenir que des fonctions.&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;Puis nous allons demander à &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;Pycharm&lt;/a&gt; d’exécuter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_aide_mathematiques.py&lt;/code&gt; à l’aide de notre environnement de test.&lt;/p&gt;

&lt;p&gt;Pour cela, créez un environnement d’exécution (expliqué dans ce &lt;a href=&quot;/cours_informatique/cours/tuto/anaconda-pycharm-pytest.html&quot;&gt;tuto&lt;/a&gt;) et créez une configuration  &lt;em&gt;pyhton test &amp;gt; pytest&lt;/em&gt;. Ici, les paramètres dont nous aurons besoin sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;le champ &lt;em&gt;name&lt;/em&gt;, qui donne un nom à notre contexte. Par exemple &lt;em&gt;“mes tests”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;le champ &lt;em&gt;target&lt;/em&gt;, qui spécifie quel script utiliser. Cliquez tout à droite de ce champ sur un petit bouton avec &lt;em&gt;…&lt;/em&gt; puis choisissez le fichier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_aide_mathematiques.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Une fois ceci configuré, cliquez sur &lt;em&gt;OK&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Un nouvel environnement de tests est créé dans le menu &lt;em&gt;run&lt;/em&gt;. Exécutez le. Vous devriez voir une nouvelle fenêtre en bas de l’écran pycharm apparaître et vos tests s’exécuter. Si tout s’est bien passé, une barre verte doit apparaître.&lt;/p&gt;

&lt;p&gt;Pour finir cette partie :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Séparez votre fonction de tests en 2 fonctions (chaque fonction de test ne doit contenir qu’une chose à tester, donc a priori qu’un seul &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Exécutez votre nouvel environnement.&lt;/li&gt;
  &lt;li&gt;Ajoutez une fonction de test qui plante. Exécutez votre environnement de test. Voyez la barre rouge. Supprimez ce test non valide.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="tests unitaires" /><category term="pytest" /><category term="unittest" /><summary type="html">Mise en œuvre de tests unitaires en python avec l’éditeur pycharm.</summary></entry></feed>